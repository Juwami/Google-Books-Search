{"version":3,"sources":["components/Navbar/Navbar.jsx","components/Jumbotron/Jumbotron.jsx","components/InputTextField/InputTextField.jsx","utils/API.js","components/BookSearch/BookSearch.jsx","components/pages/search.jsx","components/pages/saved.jsx","App.js","registerServiceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","Jumbotron","InputTextField","props","htmlFor","name","onChange","handleInputChange","type","onClick","handleSubmit","API","searchBooks","value","axios","get","BookSearch","state","bookSearch","event","_event$target","target","_this","setState","Object","defineProperty","preventDefault","console","log","then","val","components_InputTextField_InputTextField","this","Component","Search","components_BookSearch_BookSearch","Saved","App","react_router_dom","Navbar_Navbar","Jumbotron_Jumbotron","react_router","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a10fb0e6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Navbar() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<nav className=\"navbar navbar-dark bg-dark\">\r\n                <a href=\"/\" className=\"navbar-brand\">\r\n                    <h3 className=\"display-4\">Google Books</h3>\r\n                </a>\r\n\t\t\t\t<ul className=\"nav\">\r\n\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t<a href=\"/Search\" className=\"nav-link active\">Search</a>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t<a href=\"/Saved\" className =\"nav-link active\">Saved</a>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n            </nav>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div className=\"jumbotron text-center border\">\r\n        <h1>(React) Google Books Search</h1>\r\n        <h3>Search for and Save books of Interest</h3>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React from 'react';\r\n\r\nconst InputTextField = props => {\r\n\treturn (\r\n\t\t<div className=\"border form-group\">\r\n\t\t\t<form className=\"text-center\">\r\n                <label htmlFor=\"bookSearch\">Search</label>\r\n                <input name=\"bookSearch\" className=\"form-control container\" onChange={props.handleInputChange}></input>\r\n\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\" onClick={props.handleSubmit}>\r\n\t\t\t\t\tSearch!\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default InputTextField;\r\n\r\n","import axios from 'axios'\r\n\r\nexport default {\r\n    searchBooks: (value) => {\r\n        return axios.get('/api/booksearch/' + value);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport InputTextField from '../InputTextField/InputTextField';\r\nimport API from '../../utils/API'; \r\n\r\nclass BookSearch extends Component {\r\n\tstate = {\r\n\t\tbookSearch: ''\r\n\t};\r\n\r\n\thandleInputChange = event => {\r\n        const { name, value } = event.target\r\n        \r\n        this.setState({\r\n            [name] : value\r\n        })\r\n\t};\r\n\r\n\thandleSubmit = event => {\r\n        event.preventDefault();\r\n        \r\n        console.log(this.state.bookSearch)\r\n        API.searchBooks(this.state.bookSearch).then(val => {\r\n            console.log(val)\r\n        })\r\n\t\t// this.setState({\r\n\t\t// \tsearchedBook: {this.}\r\n\t\t// });\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"border\">\r\n\t\t\t\t<h3>Book Search</h3>\r\n\t\t\t\t<InputTextField handleInputChange={this.handleInputChange} handleSubmit={this.handleSubmit} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default BookSearch;\r\n","import React from 'react';\r\nimport BookSearch from '../BookSearch/BookSearch'\r\n\r\nfunction Search() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<BookSearch></BookSearch>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\n\r\nfunction Saved() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>Saved</h1>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Saved;\r\n","import React from 'react';\nimport Navbar from './components/Navbar/Navbar';\nimport Jumbotron from './components/Jumbotron/Jumbotron';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Search from './components/pages/search';\nimport Saved from './components/pages/saved';\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<div>\n\t\t\t\t<Navbar />\n\t\t\t\t<Jumbotron />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\" component={Search} />\n\t\t\t\t\t<Route exact path=\"/search\" component={Search} />\n\t\t\t\t\t<Route exact path=\"/saved\" component={Saved} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}